
@{
    ViewData["Title"] = "Role Permissions";
    Layout = "~/Views/Shared/_Layout.cshtml";


}
@model portal.models.RoleAdmin.RoleFPModel
@{ 
    var permissions = (portal.models.RoleAdmin.Permissions)ViewBag.Permissions;

    var canRoleManagerEditPermissions = (permissions == null) ? false : (bool)permissions["MD_ROLE_PER_EDIT"];
    var canRoleManagerViewPermissions = (permissions == null) ? false : (bool)permissions["MD_ROLE_PER_VIEW"];
}
<style>
    .tv-class-top {
        margin-top: -28px;
        margin-left: 45%;
    }

    .tv-class-last {
        margin-left: 45%;
    }

    .treeview-class-first {
        margin-left: -12px;
        /*margin-left: -23px;*/
    }

    .treeview-class {
        margin-left: -12px;
    }

    #treeview .k-in {
        white-space: normal;
        width: 40%;
    }

    .tvClass {
        width: 70% !Important;
        /*padding-left: 0px !Important;*/
    }

    .callout {
        margin: 0 0 10px !Important;
        padding: 1px 0px 8px 10px !Important;
    }

    .box-footer {
        padding: 0px !Important;
    }
    .k-checkbox-label checkbox-span{
    }
    .k-checkbox-label, .k-radio-label {
        cursor: pointer !important;
        padding-left: calc(10px + .5rem) !important;
    }
    .tvClass, .k-in {
        margin-left:9px !important;
        padding-left: 0px !Important;
    }
    .k-treeview .k-in .k-icon, .k-treeview .k-in .k-image, .k-treeview .k-in .k-sprite {
        margin-right: 0px !important;
    }
     
</style>

@Html.Hidden("idx", Url.Action("Index"))
<div class="content">
    <div class="kt-portlet">
        <div class="kt-portlet__head">
            <div class="kt-form__actions kt-portlet__foot">
                @*<button id="btnSave" type="submit" class="btn btn-sm btn-success"><span class="fa fa-check"></span> Save</button>
                <a href="~/RoleAdmin/Index" class="btn btn-sm btn-secondary"><i class="glyphicon glyphicon-remove"></i> Cancel</a>*@
                <label id="lblUserHeader" style="font-size: large;font-weight: 500;margin-right: 5px">Role Permissions</label>
            </div>
            <div class="kt-portlet__head-toolbar">
                <a href="~/RoleAdmin/Index" class="btn btn-clean kt-margin-r-10">
                    <i class="la la-arrow-left"></i>
                    <span class="kt-hidden-mobile">Cancel</span>
                </a>

                <div class="btn-group">
                    &nbsp;

                    <button type="button" class="btn btn-sm btn-brand" onclick="return savePermission(0)">
                        <i class="la la-check"></i>
                        <span class="kt-hidden-mobile">Save</span>
                    </button>
                    <button type="button" class="btn btn-sm btn-brand dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
                    <div class="dropdown-menu dropdown-menu-right" style="">
                        <ul class="kt-nav">
                            <li class="kt-nav__item">
                                <a onclick="return savePermission(0)" class="kt-nav__link">
                                    <i class="kt-nav__link-icon flaticon2-reload"></i>
                                    <span class="kt-nav__link-text">Save &amp; Stay</span>
                                </a>
                            </li>
                            <li class="kt-nav__item">
                                <a onclick="return savePermission(1)" class="kt-nav__link">
                                    <i class="kt-nav__link-icon flaticon2-power"></i>
                                    <span class="kt-nav__link-text">Save &amp; Go back</span>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <section class="content">
            <div class="kt-portlet__body">
                @using (Html.BeginForm("SavePerms", "RolesAdmin", FormMethod.Post, new { RoleId = Model.Id }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.Id)

                    <input type="hidden" id="Id" name="Id" value="@ViewBag.Id" />

                    <div class="box-header with-border">
                        <div class="alert alert-brand">
                            <h4></h4>
                            You are currently amending the permission for the &nbsp <span class="kt-badge kt-badge--inline kt-badge--pill kt-badge--warning kt-font-md kt-font-bolder"> @ViewBag.CurrentRoleName </span> &nbsp role.
                        </div>
                        <div class="row">
                            <div class="col-md-12">

                                @(Html.Kendo().TreeView()
                                    .Name("treeview")
                                    .Checkboxes(checkboxes => checkboxes
                                    .Name("checkedFeatures")
                                    .CheckChildren(true)
                                    //.Template(@"<input type = 'checkbox' name= 'checkedItems' value= '#= item.id #' />")
                                    )
                                    .Events(events => events
                                    .Check("onCheck").Change("onCheck")
                                    )
                                    .Items(tview =>
                                    {
                                        foreach (var item in Model.features)
                                        {
                                            var entityName = item.Feature_Name;
                                            var children = item.Permissions;
                                            var featureID = item.Feature_Id.ToString();
                                            tview.Add().Text(entityName).Id(featureID).Expanded(true).Items(branch =>
                                            {
                                                if (children != null)
                                                {
                                                    var i = 1;
                                                    var child_count = children.Count;
                                                    var j = 0;
                                                    foreach (var child in children)
                                                    {
                                                        if (child_count > 1)
                                                        {
                                                            if (j == 0)
                                                            {
                                                                branch.Add().Id(child.Permission_Id).Text(child.Permission_Desc).Checked(child.is_checked);
                                                                j = 1;
                                                            }
                                                            else
                                                            {
                                                                if (i == 1)
                                                                    branch.Add().Id(child.Permission_Id).SpriteCssClasses("treeview-class-first").Text(child.Permission_Desc).Checked(child.is_checked);
                                                                else
                                                                    branch.Add().Id(child.Permission_Id).Text(child.Permission_Desc).SpriteCssClasses("treeview-class").Checked(child.is_checked);
                                                                j = 0;
                                                                i = i++;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            branch.Add().Id(child.Permission_Id).Text(child.Permission_Desc).Checked(child.is_checked);
                                                        }

                                                    }
                                                }
                                            });
                                        }
                                    })
                                )
                               
                            </div>
                        </div>
                    </div>

                    <div class="box-footer">
                    </div>

                }

            </div>

        </section>

    </div>
</div>
<script>

    var _isDirty = false;
    var _preEditedChecklistNodes = [];
    var _canRoleManagerEditPermissions;
    var _canRoleManagerViewPermissions;
    
    var _deletedList = [];
    var _insertedList = [];
    var permissionMessage = '';
    var permissionMsgHeader = '';
    var is_trigger_click = false;
    $(document).ready(function () {

        _canRoleManagerEditPermissions = @canRoleManagerEditPermissions.ToString().ToLower();
        _canRoleManagerViewPermissions = @canRoleManagerViewPermissions.ToString().ToLower();
        


        permissionMessage = 'Sorry, you do not have access to this resource.';
        permissionMsgHeader = 'Permission denied';

        if (!_canRoleManagerEditPermissions && !_canRoleManagerViewPermissions) {
            window.location.href = '/Error/PermissionDenied';
        }
        $(".treeview-class-first").parents('.k-in').addClass('tvClass')
        $(".treeview-class").parents('.k-in').addClass('tvClass')

        $(".treeview-class-first").parents('div.k-mid').addClass('tv-class-top')
        $(".treeview-class").parents('div.k-mid').addClass('tv-class-last')

        $(".treeview-class-first").parents('div.k-bot').addClass('tv-class-top')
        $(".treeview-class").parents('div.k-bot').addClass('tv-class-last')

        //records initial state for comparisions to check if the role permissions has changed (used later on for Anychanges function).

        var treeView = $("#treeview").data("kendoTreeView");

            _preEditedChecklistNodes = [];
            checkedNodeIds(treeView.dataSource.view(), _preEditedChecklistNodes);
            treeView.collapse(".k-item");

    });
    function submitdata()
    {
        if (!_canRoleManagerEditPermissions) {
            toastr.error("Sorry, you do not have access to this resource", "Permission denied!");
            return false;
        }
        var treeView = $("#treeview").data("kendoTreeView");
        var modelid = @Model.Id  ;
        var checkedNodes = [];
        checkedNodeIds(treeView.dataSource.view(), checkedNodes);
        var nodeData = checkedNodes.toString(); //. .dataItem(e.node);
        //var saveurl = '//' + '@Context.Request.Host'+ '/RolesAdmin/SavePerms';
        var saveurl = '/api/RolesAdminApi/SavePerms';
        $.ajax({
            type: 'POST',
            url: saveurl ,
            data: {
                roleid: modelid,
                checkedFeatures: nodeData
            },
            dataType: 'json',
            success: function (result) {
                //$('#ajaxifiedDiv').html(result)
            }
        });
    }

    function checkForAnyChanges() {
        var postEditedChecklist = []
        var treeView = $("#treeview").data("kendoTreeView");
        checkedNodeIds(treeView.dataSource.view(), postEditedChecklist);

        //easy check that will save alot of time (check if the number in each array is different)
        if (postEditedChecklist.length !== _preEditedChecklistNodes.length) {
            return true;
        }

        //pre sort this in order
        _preEditedChecklistNodes.sort();
        postEditedChecklist.sort();

        //check against existing nodes
        for (var i = 0; i < postEditedChecklist.length; i++) {
            //if the sequence is different then we can guarantee there has been a change
            if (_preEditedChecklistNodes[i] !== postEditedChecklist[i]) {
                return true;
            }
        }

        return false;
    }


    function recordAnyChanges() {

        var postEditedChecklist = [];
        _insertedList = [];
        _deletedList = [];
        var treeView = $("#treeview").data("kendoTreeView");
        checkedNodeIds(treeView.dataSource.view(), postEditedChecklist);

        //pre sort this in order
        _preEditedChecklistNodes.sort();
        postEditedChecklist.sort();

        //check against existing nodes
        for (var i = 0; i < postEditedChecklist.length; i++) {
            //if the sequence is different then we can guarantee there has been a change



            if (_preEditedChecklistNodes.indexOf(postEditedChecklist[i]) < 0) {
                _insertedList.push(postEditedChecklist[i])
            }
        }


        for (var i = 0; i < _preEditedChecklistNodes.length; i++) {
            //if the sequence is different then we can guarantee there has been a change
            if (postEditedChecklist.indexOf(_preEditedChecklistNodes[i]) < 0) {
                _deletedList.push(_preEditedChecklistNodes[i])
            }
        }


    }

    $("#btnCancel").click(function (e) {
        e.preventDefault();
        //we only prompt for changes so we need to see if they were any changes
        if (checkForAnyChanges()) {

            Swal.fire({
                title: 'Cancel?',
                text: "You have unsaved changes on this page. Do you want to leave this page?",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then((result) => {
                window.location.href = $("#idx").val();
            })           
        }
        else {
            window.location.href = $("#idx").val();
        }
    });


    function savePermission(type)
    {
        if (!_canRoleManagerEditPermissions) {
            toastr.error("Sorry, you do not have access to this resource", "Permission denied!");
            return false;
        }

        recordAnyChanges();
        deleteThenInsertPerms(type);
    }

    var myVar;
    function setTimerRedirect() {
     myVar = setTimeout(redirectPage, 2000);
    }

    function redirectPage() {
        $('#notificationbar').fadeOut('fast');
        window.location.href = "/RoleAdmin/Index";
    }

    function insertPerms(type) {

        //var insertUrl = '//' + '@Context.Request.Host' + '/RolesAdmin/InsertPerms';
        var insertUrl = '/api/RoleAdminApi/InsertPerms';
        var modelid = @Model.Id  ;

        var insertedList = _insertedList.toString();

        $.ajax({
            type: 'GET',
            url: insertUrl,
            data: {
                roleid: modelid,
                insertedPerms: _insertedList.toString()
            },
            dataType: 'json',
            success: function (result) {
                toastr.success("Permissions have been saved successfully.", "Success");
                //// if type is 1 then save and go back.
                if (type === 1) {
                    setTimerRedirect();
                }
            },
            error: function (result) {
                toastr.error(result.responseText, "Error!");
            } // redraw the tree on success
            //error:   error handler in here
        });        
    }

    function deleteThenInsertPerms(type) {

        //insertPerms();
        //return;
        //var deleteUrl = '//' + '@Context.Request.Host' + '/RolesAdmin/DeletePerms';
        var deleteUrl = '/api/RoleAdminApi/DeletePerms';
        var deletedList = _deletedList.toString();

        var modelid = @Model.Id  ;

        $.ajax({
            type: 'GET',
            url: deleteUrl,
            data: {
                roleid: modelid,
                deletedItems: deletedList
            },
            dataType: 'json',
            success: function (result) {
                insertPerms(type);
            },
            error: function (result) {
                toastr.error(result.responseText, "Error!");
            } // redraw the tree on success
        });
    }


</script>

<script>
    // function that gathers IDs of checked nodes
    function checkedNodeIds(nodes, checkedNodes) {

        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].checked) {
                checkedNodes.push(nodes[i].id);
            }

            if (nodes[i].hasChildren) {
                checkedNodeIds(nodes[i].children.view(), checkedNodes);
            }
        }
    }
    // show checked node IDs on datasource change
    function onCheck(events) {

        var checkedNodes = [],
            treeView = $("#treeview").data("kendoTreeView"),
            message;
        var checkbox = $(events.node).find(":checkbox");
        var checked = checkbox.prop("checked");        
        //console.log("Selecting: " + events.sender._dataSourceUids.valueOf()[events.node.dataset.uid].id);

        if (checked == false) {
            var uid = events.node.dataset.uid;
            //var id = events.node.dataset.id;
            var id = events.sender._dataSourceUids.valueOf()[uid].id;
            var isFeatureCall = false;
            var errMsg = "you cannot remove this mandatory permssion because it is not appearing anywhere else in other roles";
            var Url = '/api/RoleAdminApi/CheckMandatoryRolePermission/';
            if ($.isNumeric(id) == true) {
                isFeatureCall = true;
                errMsg = "you cannot remove all because some of them are mandatory pemissions and those are not appearing anywhere else in other roles";
                Url = '/api/RoleAdminApi/CheckMandatoryRolePermissionsByFeatureId/';
            }
            $.ajax({
                url: Url,
                type: "GET",
                cache: false,
                datatype: "JSON",
                data: { Id: id },
                success: function (data) {
                    if (data.restrictPermissionUncheck == true) {
                        helperkendo.showConfirmOk("Alert", errMsg, "Ok").then(function () {
                            if (isFeatureCall == true) {
                               window.location.href = '@Url.Action("Perms", "RolesAdmin")';
                            }
                            else {
                                checkbox.trigger("click");
                            }
                            checkedNodeIds(treeView.dataSource.view(), checkedNodes);
                            if (checkedNodes.length > 0) {
                                message = "Selected Permissions: " + checkedNodes.join(",");
                            } else {
                                message = "";
                            }
                        });
                    }
                },
                error: function (xhr) {
                    toastr.error("Error occured.please try again","Error!");
                    return false;
                },
                complete: function () { },
            });
        }
        else {
            checkedNodeIds(treeView.dataSource.view(), checkedNodes);
            if (checkedNodes.length > 0) {
                message = "Selected Permissions: " + checkedNodes.join(",");
            } else {
                message = "";
            }
        }
    }
</script>