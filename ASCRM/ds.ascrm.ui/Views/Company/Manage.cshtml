
@{
    ViewData["Title"] = ViewBag.Page;
    Layout = "~/Views/Shared/_Layout.cshtml";

    var permissions = (portal.models.RoleAdmin.Permissions)ViewBag.Permissions;
    var canCompanyView = (permissions == null) ? false : (bool)permissions["COMPANY_VIEW"];
    var canCompanyEdit = (permissions == null) ? false : (bool)permissions["COMPANY_EDIT"];
    var canCompanyCreate = (permissions == null) ? false : (bool)permissions["COMPANY_ADD"];
    var canCompanyDel = (permissions == null) ? false : (bool)permissions["COMPANY_DEL"];
    var hasAdminRole = (permissions == null) ? false : (bool)permissions["MD_LEAD_MSTR"];
}


<div class="content" id="dv_Manage_Companies">
    <div class="kt-portlet">

        <div class="kt-portlet__head">
            <label id="lblUserHeader" style="font-size: large;font-weight:500;margin-left:-10px;margin-top:20px;">@ViewBag.Page</label>
            <div class="kt-portlet__head-toolbar">


                <div class="form__actions kt-portlet__foot">
                    <a href="~/Company/Create" class="btn btn-sm btn-bold btn-label-brand">
                        <i class="fa fa-plus"></i> Create Company
                    </a>
                </div>

                <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-brand">
                        <i class="la la-check"></i>
                        <span class="kt-hidden-mobile">Export Options</span>
                    </button>
                    <button type="button" class="btn btn-sm btn-brand dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
                    <div class="dropdown-menu dropdown-menu-right" style="">
                        <ul class="kt-nav">
                            <li class="kt-nav__item">
                                <a onclick="return exportPDF()" class="kt-nav__link">
                                    <i class="kt-nav__link-icon"></i>
                                    <span class="kt-nav__link-text">PDF</span>
                                </a>
                            </li>
                            <li class="kt-nav__item">
                                <a onclick="return exportExcel()" class="kt-nav__link">
                                    <i class="kt-nav__link-icon"></i>
                                    <span class="kt-nav__link-text">Excel</span>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <section class="content">
            <div class="kt-portlet__body">

                <div class="box-header with-border">
                    <div class="row">
                        <div class="col-lg-9">

                        </div>
                        <div class="col-lg-3">
                            <input class="form-control" placeholder="Search Company" style="margin-bottom:10px;" id="search" type="text" autocomplete="off" />
                        </div>

                    </div>

                    @(Html.Kendo().Grid<ds.portal.companies.Models.CompanyModel>()
                        .Name("gridCompanies")
                        .Columns(columns =>
                        {
                            columns.Template("<div class='gridactionbuttonscontainer'><a  class='kt-font-danger' style='cursor:pointer;'onclick=PerformCompanyDelete('#:id#') title='Delete'> <span style='text-align:center;' class='fa fa-trash-alt'></span></a>" +
                                             "</div>").Width(30).ClientHeaderTemplate(" ");
                            columns.Bound(p => p.id).Title("Id").ClientTemplate("<a style='cursor:pointer;' class='link-text' onclick=PerformCompanyEdit('#:encodedId#') title='#:id#'>#:id#</a>").Width(70);
                            //columns.Bound(p => p.Lead_DateOfEnquiry_D).Format("{0:dd/MM/yyyy}").Title("Enquiry").Width(120);
                            columns.Bound(p => p.name).Title("Company Name").ClientTemplate("<a style='cursor:pointer;' class='link-text' onclick=PerformCompanyEdit('#:encodedId#') title='#:name#'>#:name#</a>").Title("Name").Width(180);
                            columns.Bound(p => p.address1).Title("Address").Width(200);
                            columns.Bound(p => p.postcode).Title("PostCode").Width(160);
                            columns.Bound(p => p.tel1).Title("Tel").Width(160);
                            columns.Bound(p => p.email1).Title("Email").Width(160);
                            //columns.Bound(p => p.LeadID).Title("Lead(s)").Width(150);
                            //if (hasAdminRole)
                            //{
                            //    columns.Bound(p => p.Users_Username).ClientTemplate("<a style='cursor:pointer' onclick='return openSalesAdvisor(#= Lead_Id_SalesAdvisor#,#=Lead_Id#)'> #= Users_Username # <a/>").Title("Assigned to").HtmlAttributes(new { style = "text-align:center" }).Width(180);
                            //    columns.Bound(p => p.Lead_IsDuplicate).ClientTemplate("<a style='cursor:pointer' onclick='return duplicateOnclick(#= Lead_IsDuplicate#,#=Lead_Id#)'> #= Lead_IsDuplicate == 1 ? 'Yes' :'No' # <a/>").Title("Duplicated").HtmlAttributes(new { style = "text-align:center" }).Width(120);
                            //}
                        })
                        .Resizable(resize => resize.Columns(true))
                        .Reorderable(x => x.Columns(true))
                        .ColumnMenu(c => c.Columns(true))
                        .Scrollable()
                        .Sortable()
                        .Filterable(f => f.Messages(m => m.IsFalse("No")).Messages(m => m.IsTrue("Yes")))
                        .Sortable(sortable =>
                        {
                            sortable.SortMode(GridSortMode.SingleColumn);
                        })
                        .Pageable()
                        .NoRecords()
                        .Filterable()
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .DataSource(dataSource =>
                        dataSource
                        .WebApi()
                        .Model(model =>
                        {
                            model.Id(p => p.id);
                        })
                        //.Events(events => events.Error("error_handler")) ---TODO
                       .Read(read => read.Action("GetCompanies", "CompanyApi"))
                        .PageSize(30)
                        )
                    )
                </div>
            </div>
        </section>


    </div>
</div>

@section Scripts{
    <script src="~/lib/vue/vue.js"></script>
    <script src="~/lib/vue/vuelidate.min.js"></script>
    <script src="~/lib/vue/validators.min.js"></script>
    <script src="~/js/Admin/Companies/manage.js"></script>

}
<script>

    var _canRoleManagerViewCompany;
    var _canRoleManagerEditCompany;
    var _canRoleManagerDeleteCompany;

    $(document).ready(function () {
        _canRoleManagerViewCompany = @canCompanyView.ToString().ToLower();
        _canRoleManagerEditCompany = @canCompanyEdit.ToString().ToLower();
        _canRoleManagerDeleteCompany = @canCompanyDel.ToString().ToLower();
        console.log(_canRoleManagerViewCompany);
        console.log(_canRoleManagerEditCompany);

        if (!_canRoleManagerViewCompany) {
            window.location.href = '/Error/PermissionDenied';
        }

        $("#search").keyup(function () {
            $("#gridCompanies").data("kendoGrid").refresh();
            debugger; // eslint-disable-line

            var id = $(this).val();
            if (id != "") {
                $.ajax({
                    url: "/api/CompanyApi/SearchInCompany",
                    data: { name: id },
                    type: "GET",
                    contentType: "application/json",
                    dataType: "json",
                    async: false
                }).done(function (response) {
                    $("#gridCompanies").data("kendoGrid").dataSource.data([]);


                    let grid = $("#gridCompanies").data("kendoGrid");

                    for (var i = 0; i < response.Data.length; i++) {

                        grid.dataSource.add({
                            encodedId: response.Data[i].encodedId, id: response.Data[i].id, name: response.Data[i].name, address1: response.Data[i].address1, postcode: response.Data[i].postcode
                            , tel1: response.Data[i].tel1, email1: response.Data[i].email1
                        });

                    }


                });
            }
            else {
                $("#gridCompanies").data("kendoGrid").dataSource.read();


               

            }

        });

        
    });
    function getReport() {
        /*if ($('#txtDateEnquiryFrom').val() === "") {
            toastr.error("Enquiry date 'From' is required.");
            return;
        }
        if ($('#txtDateEnquiryTo').val() === "") {
            toastr.error("Enquiry date 'To' is required.");
            return;
        }*/

        $.ajax({
            url: "/api/ReportApi/GetContacts",
            type: "GET",
            contentType: "application/json",
            data:
            {
                startDate: $('#txtDateEnquiryFrom').val(),
                endDate: $('#txtDateEnquiryTo').val()
            },
            dataType: "json",
        }).done(function (response) {
            $("#contactReportGrid").data("kendoGrid").dataSource.data(response);
            $('#contactReportGrid').getKendoGrid().refresh();
            $("#contactReportGrid").getKendoGrid().saveAsExcel();
        }).fail(function (xhr) {
            toastr.error(xhr.responseText, 'Error!');
        });

    }
</script>

